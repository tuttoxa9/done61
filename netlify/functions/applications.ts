import { Handler, HandlerEvent, HandlerContext } from "@netlify/functions";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
interface ApplicationData {
  fullName: string;
  birthDate: string;
  phone: string;
}

const handler: Handler = async (event: HandlerEvent, context: HandlerContext) => {
  // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod === "OPTIONS") {
    return {
      statusCode: 200,
      headers: corsHeaders,
      body: '',
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      headers: corsHeaders,
      body: JSON.stringify({ message: "Method Not Allowed" }),
    };
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const data: ApplicationData = JSON.parse(event.body || "{}");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!data.fullName || !data.birthDate || !data.phone) {
      return {
        statusCode: 400,
        headers: corsHeaders,
        body: JSON.stringify({ message: "Missing required fields: fullName, birthDate, and phone" }),
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || !chatId) {
      console.error("Missing environment variables: TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID");
      console.error("Available env vars:", Object.keys(process.env).filter(key => key.includes('TELEGRAM')));
      return {
        statusCode: 500,
        headers: corsHeaders,
        body: JSON.stringify({ message: "Server configuration error" }),
      };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const message = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\nüìã *–§–ò–û*: ${data.fullName}\nüéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è*: ${data.birthDate}\nüì± *–¢–µ–ª–µ—Ñ–æ–Ω*: ${data.phone}\n\n‚è∞ *–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU')}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown",
        }),
      }
    );

    if (!telegramResponse.ok) {
      const telegramError = await telegramResponse.json();
      console.error("Telegram API error:", telegramError);
      throw new Error("Failed to send message to Telegram");
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      statusCode: 200,
      headers: corsHeaders,
      body: JSON.stringify({ message: "Application submitted successfully" }),
    };
  } catch (error) {
    console.error("Error processing application:", error);
    return {
      statusCode: 500,
      headers: corsHeaders,
      body: JSON.stringify({ message: "Internal Server Error" }),
    };
  }
};

export { handler };
